# -*- coding: utf-8 -*-
"""
/***************************************************************************
 QRAVEDockWidget
                                 A QGIS plugin
 QRAVE Dock Widget
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2021-04-12
        git sha              : $Format:%H$
        copyright            : (C) 2021 by NAR
        email                : info@northarrowresearch.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from __future__ import annotations
from typing import List, Dict
import os


from qgis.PyQt import uic
from qgis.core import Qgis, QgsProject, QgsRasterLayer, QgsVectorLayer
from qgis.PyQt.QtGui import QStandardItemModel, QStandardItem, QIcon, QDesktopServices
from qgis.PyQt.QtWidgets import QDockWidget, QWidget, QTreeView, QVBoxLayout, QMenu, QAction
from qgis.PyQt.QtCore import pyqtSignal, pyqtSlot, Qt, QModelIndex, QUrl

from .classes.settings import Settings, CONSTANTS
from .classes.basemaps import BaseMaps, QRaveBaseMap, BaseMapTreeTypes
from .classes.project import Project
from .classes.context_menu import ContextMenu
from .classes.qrave_map_layer import QRaveMapLayer, QRaveTreeTypes
from .meta_widget import MetaType

FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'ui', 'dock_widget.ui'))


ADD_TO_MAP_TYPES = ['polygon', 'raster', 'point', 'line']


class QRAVEDockWidget(QDockWidget, FORM_CLASS):

    closingPlugin = pyqtSignal()
    dataChange = pyqtSignal()
    showMeta = pyqtSignal()
    metaChange = pyqtSignal(str, str, dict, bool)

    def __init__(self, parent=None):
        """Constructor."""
        super(QRAVEDockWidget, self).__init__(parent)
        # Set up the user interface from Designer.
        # After setupUI you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://doc.qt.io/qt-5/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect

        # self.treeView
        self.setupUi(self)
        self.menu = ContextMenu()

        self.treeView.setContextMenuPolicy(Qt.CustomContextMenu)
        self.treeView.customContextMenuRequested.connect(self.open_menu)
        self.treeView.doubleClicked.connect(self.default_tree_action)
        self.treeView.clicked.connect(self.item_change)

        self.treeView.expanded.connect(self.expand_tree_item)

        self.settings = Settings()
        self.model = QStandardItemModel()
        # self.treeView.setStyleSheet(STYLE)

        # Initialize our classes
        self.basemaps = BaseMaps()
        self.treeView.setModel(self.model)
        self.project = Project(self.settings.getValue('projectPath'))

        self.dataChange.connect(self.load)
        self.load()

    def expand_tree_item(self, idx: QModelIndex):
        item = self.model.itemFromIndex(idx)
        data = item.data(Qt.UserRole)
        if isinstance(data, QRaveBaseMap):
            data.load_layers()

    @pyqtSlot()
    def load(self):
        # re-initialize our model
        self.model.clear()

        # self.model.setHorizontalHeaderLabels(['Name', 'Height', 'Weight'])
        # self.tree.header().setDefaultSectionSize(180)

        self.project = Project(self.settings.getValue('projectPath'))
        # Load the tree objects
        self.project.load()
        self.basemaps.load()

        # self._populateTree(self.tree, self.model.invisibleRootItem())
        if self.project.exists is True and self.project.qproject is not None:
            self.model.appendRow(self.project.qproject)

        # Now load the basemaps
        region = self.settings.getValue('basemapRegion')
        if self.settings.getValue('basemapsInclude') is True \
                and region is not None and len(region) > 0 \
                and region in self.basemaps.regions.keys():
            self.model.appendRow(self.basemaps.regions[region])

        # Finally expand all levels
        self.expandChildren()
        # self.treeView.expandAll()

    def closeEvent(self, event):
        self.closingPlugin.emit()
        event.accept()

    def expandChildren(self, idx: QModelIndex = None):
        if idx is None:
            idx = self.treeView.rootIndex()

        for idy in range(self.model.rowCount(idx)):
            child = self.model.index(idy, 0, idx)
            self.expandChildren(child)

        item = self.model.itemFromIndex(idx)
        data = item.data(Qt.UserRole) if item is not None else None
        if not self.treeView.isExpanded(idx) and not isinstance(data, QRaveBaseMap):
            self.treeView.setExpanded(idx, True)

    def default_tree_action(self, idx: QModelIndex):
        if not idx.isValid():
            return
        item = self.model.itemFromIndex(idx)
        data = item.data(Qt.UserRole)

        # This is the default action for all add-able layers including basemaps
        if isinstance(data, QRaveMapLayer):
            QRaveMapLayer.add_layer_to_map(item)

        if isinstance(data, QRaveBaseMap):
            # Expand is the default option because we might need to load the layers
            return

        if data is not None and 'type' in data:

            if data['type'] in [QRaveTreeTypes.ROOT]:
                self.change_meta(item, data, True)

            elif data['type'] in [QRaveTreeTypes.FOLDER, BaseMapTreeTypes.ROOT, BaseMapTreeTypes.SUPER_FOLDER, BaseMapTreeTypes.SUB_FOLDER]:
                # Expanda and contract is already implemented as a default
                print("Default Folder Action")

            elif data['type'] == QRaveTreeTypes.VIEW:
                print("Default View Action")
                self.add_view_to_map(item)

    def item_change(self, postion):
        indexes = self.treeView.selectedIndexes()
        if len(indexes) < 1 or self.project is None or self.project.exists is False:
            return

        # No multiselect so there is only ever one item
        item = self.model.itemFromIndex(indexes[0])
        data = item.data(Qt.UserRole)
        self.change_meta(item, data)

    def change_meta(self, item: QStandardItem, data, show=False):
        if isinstance(data, QRaveMapLayer):
            self.metaChange.emit(item.text(), MetaType.LAYER, data.meta, show)

        elif isinstance(data, QRaveBaseMap):
            self.metaChange.emit(item.text(), MetaType.NONE, {}, show)

        elif data is not None and 'type' in data:
            if data['type'] in ['ROOT']:
                self.metaChange.emit(item.text(), MetaType.PROJECT, {
                    'project': self.project.meta,
                    'warehouse': self.project.warehouse_meta
                }, show)
            elif data['type'] in [QRaveTreeTypes.FOLDER, BaseMapTreeTypes.SUPER_FOLDER, BaseMapTreeTypes.ROOT]:
                self.metaChange.emit(item.text(), MetaType.FOLDER, data, show)
        else:
            self.metaChange.emit(item.text(), MetaType.NONE, data, show)

    def open_menu(self, position):

        indexes = self.treeView.selectedIndexes()
        if len(indexes) < 1:
            return

        # No multiselect so there is only ever one item
        idx = indexes[0]

        if not idx.isValid():
            return

        item = self.model.itemFromIndex(indexes[0])
        data = item.data(Qt.UserRole)

        # This is the layer context menu
        if isinstance(data, QRaveMapLayer):
            if data.layer_type == QRaveMapLayer.LayerTypes.WMS:
                self.basemap_context_menu(idx, item, data)
            else:
                self.layer_context_menu(idx, item, data)

        # A QARaveBaseMap is just a container for layers
        elif isinstance(data, QRaveBaseMap):
            return

        elif data is not None and 'type' in data:

            if data['type'] in [QRaveTreeTypes.ROOT]:
                self.project_context_menu(idx, item, data)

            elif data['type'] in [QRaveTreeTypes.FOLDER]:
                self.folder_context_menu(idx, item, data)

            elif data['type'] == QRaveTreeTypes.VIEW:
                self.view_context_menu(idx, item, data)

        self.menu.exec_(self.treeView.viewport().mapToGlobal(position))

    def layer_context_menu(self, idx: QModelIndex, item: QStandardItem, data: QRaveMapLayer):
        self.menu.clear()
        self.menu.addAction('ADD_TO_MAP', lambda: QRaveMapLayer.add_layer_to_map(item), enabled=data.exists)
        self.menu.addAction('VIEW_LAYER_META', lambda: self.change_meta(item, data, True))
        self.menu.addAction('VIEW_WEB_SOURCE', lambda: self.view_warehouse_project())
        self.menu.addAction('BROWSE_FOLDER', lambda: self.file_system_locate(data.layer_uri))

    def basemap_subfolder_context_menu(self, idx: QModelIndex, item: QStandardItem, data: Dict[str, str]):
        self.menu.clear()
        self.menu.addAction('ADD_ALL_TO_MAP', lambda: QRaveMapLayer.add_children_to_map(item))

    def basemap_context_menu(self, idx: QModelIndex, item: QStandardItem, data: Dict[str, str]):
        self.menu.clear()
        self.menu.addAction('ADD_TO_MAP', lambda: QRaveMapLayer.add_layer_to_map(item))

    def folder_context_menu(self, idx: QModelIndex, item: QStandardItem, data):
        self.menu.clear()
        self.menu.addAction('ADD_ALL_TO_MAP', lambda: self.add_children_to_map(item))
        self.menu.addSeparator()
        self.menu.addAction('COLLAPSE_ALL', lambda: self.toggleSubtree(item, False))
        self.menu.addAction('EXPAND_ALL', lambda: self.toggleSubtree(item, True))

    def view_context_menu(self, idx: QModelIndex, item: QStandardItem, data):
        self.menu.clear()
        self.menu.addAction('ADD_ALL_TO_MAP', lambda: self.add_view_to_map(item))

    def project_context_menu(self, idx: QModelIndex, item: QStandardItem, data):
        self.menu.clear()
        self.menu.addAction('COLLAPSE_ALL', lambda: self.toggleSubtree(None, False))
        self.menu.addAction('EXPAND_ALL', lambda: self.toggleSubtree(None, True))

        self.menu.addSeparator()
        self.menu.addAction('BROWSE_PROJECT_FOLDER', lambda: self.file_system_locate(self.project.project_xml_path))
        self.menu.addAction('VIEW_PROJECT_META', lambda: self.change_meta(item, data, True))
        self.menu.addAction('ADD_ALL_TO_MAP', self.add_children_to_map(item))
        self.menu.addSeparator()
        self.menu.addAction('REFRESH_PROJECT_HIERARCHY', self.load)
        self.menu.addAction('CUSTOMIZE_PROJECT_HIERARCHY', enabled=False)

    def file_system_open(self, fpath: str):
        qurl = QUrl.fromLocalFile(fpath)
        QDesktopServices.openUrl(qurl)

    def file_system_locate(self, fpath: str):

        final_path = os.path.dirname(fpath)
        while not os.path.isdir(final_path):
            final_path = os.path.dirname(final_path)

        qurl = QUrl.fromLocalFile(final_path)
        QDesktopServices.openUrl(qurl)

    def toggleSubtree(self, item: QStandardItem = None, expand=True):

        def _recurse(curritem):
            idx = self.model.indexFromItem(item)
            if expand is not self.treeView.isExpanded(idx):
                self.treeView.setExpanded(idx, expand)

            for row in range(curritem.rowCount()):
                _recurse(curritem.child(row))

        if item is None:
            if expand is True:
                self.treeView.expandAll()
            else:
                self.treeView.collapseAll()
        else:
            _recurse(item)

    def add_view_to_map(self, item: QStandardItem):
        print('Add view to map')

    def add_children_to_map(self, item: QStandardItem):
        print('Add children to map')

    def view_warehouse_project(self):
        print('view warehouse project')
