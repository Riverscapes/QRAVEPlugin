# -*- coding: utf-8 -*-
"""
/***************************************************************************
 QRAVE
                                 A QGIS plugin
 Explore symbolized Riverscapes projects
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-04-13
        git sha              : $Format:%H$
        copyright            : (C) 2021 by North Arrow Research
        email                : info@northarrowresearch.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import os.path
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, Qt, QUrl
from qgis.PyQt.QtGui import QIcon, QDesktopServices
from qgis.PyQt.QtWidgets import QAction, QFileDialog, QToolButton, QMenu
from .classes.settings import Settings
# Initialize Qt resources from file resources.py
# from resources import qt_version
# Import the code for the dialog
from .ui.options import OptionsDialog
from .ui.about import AboutDialog
from .ui.dockwidget import QRAVEDockWidget


class QRAVE:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'QRAVE_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Riverscapes Plugin (QRAVE)')

        # TODO: We are going to let the user set this up in a future iteration
        self.toolbar = self.iface.addToolBar(u'QRAVE')
        self.toolbar.setObjectName(u'QRAVE')

        # print "** INITIALIZING HelloWorld"

        self.pluginIsActive = False
        self.dockwidget = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('QRAVE', message)

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        openAction = QAction(QIcon(':/plugins/qrave_toolbar/RaveAddIn_16px.png'), self.tr(u'Riverscapes Plugin (QRAVE)'), self.iface.mainWindow())
        openAction.triggered.connect(self.run)
        openAction.setEnabled(True)
        openAction.setStatusTip('do a thing')
        openAction.setWhatsThis('what\'s this')

        openProjectAction = QAction(QIcon(':/plugins/qrave_toolbar/OpenProject.png'), self.tr(u'Open Riverscapes Project'), self.iface.mainWindow())
        openProjectAction.triggered.connect(self.projectBrowserDlg)
        openProjectAction.setEnabled(True)
        openProjectAction.setStatusTip('do a thing')
        openProjectAction.setWhatsThis('what\'s this')

        helpButton = QToolButton()
        helpButton.setMenu(QMenu())
        helpButton.setPopupMode(QToolButton.MenuButtonPopup)

        m = helpButton.menu()
        helpAction = QAction(
            self.tr('Help'),
            self.iface.mainWindow()
        )

        def openUrl():
            QDesktopServices.openUrl(QUrl("http://rave.riverscapes.xyz"))
        helpAction.triggered.connect(openUrl)

        raveOptionsAction = QAction(
            self.tr('Settings'),
            self.iface.mainWindow()
        )
        raveOptionsAction.triggered.connect(self.optionsLoad)

        aboutAction = QAction(
            self.tr('About QRAVE'),
            self.iface.mainWindow()
        )
        aboutAction.triggered.connect(self.aboutLoad)

        m.addAction(helpAction)
        m.addAction(raveOptionsAction)
        m.addSeparator()
        m.addAction(aboutAction)
        helpButton.setDefaultAction(helpAction)

        self.toolbar.addAction(openAction)
        self.toolbar.addAction(openProjectAction)
        self.toolbar.addWidget(helpButton)

    def onClosePlugin(self):
        """Cleanup necessary items here when plugin dockwidget is closed"""

        # print "** CLOSING QRAVE DockWidget"

        # disconnects
        self.dockwidget.closingPlugin.disconnect(self.onClosePlugin)

        # remove this statement if dockwidget is to remain
        # for reuse if plugin is reopened
        # Commented next statement since it causes QGIS crashe
        # when closing the docked window:
        # self.dockwidget = None

        self.pluginIsActive = False

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Riverscapes Plugin (QRAVE)'),
                action)
            self.iface.removeToolBarIcon(action)
        # remove the toolbar
        del self.toolbar

    def projectBrowserDlg(self):
        """
        Browse for a project directory
        :return:
        """
        settings = Settings()
        filename = QFileDialog.getExistingDirectory(self.dockwidget, "Open a project folder", settings.getSetting('DataDir'))
        if filename is not None and filename != "":
            print(filename)
            # self.projectLoad(os.path.join(filename, program.ProjectFile), outside=True)

    def optionsLoad(self):
        dialog = OptionsDialog()
        dialog.exec_()

    def aboutLoad(self):
        dialog = AboutDialog()
        dialog.exec_()

    def run(self):
        """Run method that performs all the real work"""

        if not self.pluginIsActive:
            self.pluginIsActive = True

            # print "** STARTING QRAVE"

            # dockwidget may not exist if:
            #    first run of plugin
            #    removed on close (see self.onClosePlugin method)
            if self.dockwidget is None:
                # Create the dockwidget (after translation) and keep reference
                self.dockwidget = QRAVEDockWidget()

            # connect to provide cleanup on closing of dockwidget
            self.dockwidget.closingPlugin.connect(self.onClosePlugin)

            # show the dockwidget
            # TODO: fix to allow choice of dock location
            self.iface.addDockWidget(Qt.LeftDockWidgetArea, self.dockwidget)
            self.dockwidget.show()
